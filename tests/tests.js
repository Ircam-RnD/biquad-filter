var assert = require('assert');
var BiquadFilter = require('../biquad-filter.es6.js')

describe("BiquadFilter tests", function() {
    var bf = new BiquadFilter()
    it('should get the right number of cascadeFilters', function(){
        var inputCoef = [2, 1, 1, 1, 1, 1, 1, 1, 1];
        var nb = bf.getNumberOfCascadeFilters(inputCoef);
        assert.equal(nb, 2);
    });
    it('should set coefficient properly if input coef are fine', function(){
        var inputCoef = [2, 1, 2, 3, 4, 5, 6, 7, 8];
        bf.setCoefficients(inputCoef);
        var coefs = [{a1:3, a2:4, b1:1, b2:2}, {a1:7, a2:8, b1:5, b2:6}];
        coefs.g = 2;
        assert.deepEqual(bf.coefficients[0], coefs[0]);
        assert.deepEqual(bf.coefficients[1], coefs[1]);
        assert.equal(inputCoef[0], coefs.g);
    });
    it('should throw an exception when no coef is set', function(){
        assert.throws(function() { bf.setCoefficients() }, Error);
    });
    it('should reset memories', function(){
        var memories = [{xi1: 0, xi2: 0, yi1: 0, yi2: 0}, {yi1: 0, yi2: 0}]
        var inputCoef = [2, 1, 2, 3, 4, 5, 6, 7, 8];
        bf.setCoefficients(inputCoef);
        bf.resetMemories()
        assert.deepEqual(bf.memories[0], memories[0]);
        assert.deepEqual(bf.memories[1], memories[1]);
    })
    it('should filter sound correctly', function(){
        // easy one, input buffer empty
        var inputBuffer = Array.apply(null, new Array(128)).map(Number.prototype.valueOf,0);
        var outputBuffer = [];
        var inputCoef = [2, 1, 1, 1, 1, 1, 1, 1, 1];
        bf.process(inputBuffer, outputBuffer);
        assert.deepEqual(inputBuffer, outputBuffer);
        var i = 0;
        inputBuffer = Array.apply(null, new Array(128)).map(function(){return i++})
        bf.process(inputBuffer, outputBuffer);
        var supposedOutputBuffer = [0,2,-4,30,-144,818,-4540,25350,-141096,784922,-4365268,24276846,-135014592,750887426,-4176099052,23225606358,-129170472792,718388472554,-3995355482884,22220380417854,-123579818685168,687295687052498,-3822431260188700,21258653327413930,-118231123216714660,657548635906621400,-3656991465614115000,20338551172014560000,-113113926479089250000,629089075977334200000,-3.498712120008502e+21,1.945827223224117e+22,-1.0821820866562167e+23,6.018612828014254e+23,-3.3472833102850077e+24,1.861609290958365e+25,-1.0353438388480548e+26,5.758119439169692e+26,-3.202408536340341e+27,1.7810364203046635e+28,-9.905328113060372e+28,5.508900542898529e+29,-3.06380413098414e+30,1.7039508482570158e+31,-9.476612633011799e+31,5.270468164502647e+32,-2.931198704510909e+33,1.6302016399974244e+34,-9.066452516373244e+34,5.042355449463331e+35,-2.8043326133144715e+36,1.5596443933630635e+37,-8.674044662889865e+37,4.824115749332455e+38,-2.682957451501529e+39,1.492140956104474e+40,-8.298620731530096e+40,4.615321747187488e+41,-2.5668355645088336e+42,1.4275591553811844e+43,-7.939445636061224e+43,4.415564620937909e+44,-2.4557395837716385e+45,1.3657725389651142e+46,-7.595816105738489e+46,4.224453242844851e+47,-2.349451981532317e+48,1.3066601276450338e+49,-7.267059308289383e+49,4.0416134136865414e+50,-2.2477646449174286e+51,1.2501061783472767e+52,-6.952531532496994e+52,3.866687130070074e+53,-2.1504784684492924e+54,1.1959999575088988e+55,-6.651616927802857e+55,3.699331883454881e+56,-2.0574029641941882e+57,1.1442355242595414e+58,-6.363726298461439e+58,3.539219989515375e+59,-1.9683558887838472e+60,1.094711522987463e+61,-6.088295949885162e+61,3.386037946529644e+62,-1.8831628865799375e+63,1.0473309848835847e+64,-5.824786584921143e+64,3.239485821537932e+65,-1.8016571482828607e+66,1.0020011380749679e+67,-5.572682247898486e+67,3.099276663068966e+68,-1.7236790843163973e+69,9.586332259759608e+69,-5.331489314378608e+70,2.965135939284257e+71,-1.6490760123486912e+72,9.171423335013434e+72,-5.1007355246304505e+73,2.8368010004402404e+74,-1.577701858337732e+75,8.774472208011932e+75,-4.879969058938167e+76,2.714020564615762e+77,-1.5094168705159802e+78,8.394701641919253e+78,-4.668757652930693e+79,2.5965542256979455e+80,-1.4440873457541065e+81,8.031368039720389e+81,-4.466687751200986e+82,2.4841719826630593e+83,-1.3815853677680628e+84,7.683759988245992e+84,-4.273363697557744e+85,2.376653789230742e+86,-1.3217885566568998e+87,7.351196865213705e+87,-4.088406960324073e+88,2.2737891230097544e+89,-1.2645798292809023e+90,7.033027506558512e+90,-3.911455391166237e+91,2.1753765732916847e+92,-1.2098471700108802e+93,6.728628931442814e+93];
        assert.deepEqual(outputBuffer, supposedOutputBuffer);
    })
});
